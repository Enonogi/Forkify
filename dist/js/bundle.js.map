{"version":3,"sources":["../../src/js/index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAY,W;;AACZ;;IAAY,W;;AACZ;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAM,QAAQ,EAAd;;AAEA;;;AAGA,IAAM;AAAA,qEAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACM,iBAFc,GAEN,YAAY,QAAZ,EAFM,EAEkB;;AAFlB,iBAIhB,KAJgB;AAAA;AAAA;AAAA;;AAKlB;AACA,kBAAM,MAAN,GAAe,IAAI,gBAAJ,CAAW,KAAX,CAAf;;AAEA;AACA,wBAAY,UAAZ,GATkB,CASQ;AAC1B,wBAAY,YAAZ,GAVkB,CAUU;AAC5B,oCAAa,eAAS,aAAtB,EAXkB,CAWoB;;AAXpB;AAAA;AAAA,mBAcV,MAAM,MAAN,CAAa,UAAb,EAdU;;AAAA;AAciB;AACjC,oBAAQ,GAAR,CAAY,wBAAZ;;AAEA;AACA,qCAlBgB,CAkBD;AACf,wBAAY,aAAZ,CAA0B,MAAM,MAAN,CAAa,MAAvC,EAnBgB,CAmBgC;AAnBhC;AAAA;;AAAA;AAAA;AAAA;;AAsBhB,kBAAM,yCAAN;AACA;;AAvBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA6BA,eAAS,UAAT,CAAoB,gBAApB,CAAqC,QAArC,EAA+C,aAAK;AAAE;AACpD,IAAE,cAAF,GADkD,CAC9B;AACpB;AACD,CAHD;;AAKA,eAAS,iBAAT,CAA2B,gBAA3B,CAA4C,OAA5C,EAAqD,aAAK;AACxD,MAAM,MAAM,EAAE,MAAF,CAAS,OAAT,CAAiB,aAAjB,CAAZ;AACA,MAAI,GAAJ,EAAS;AACP,QAAM,WAAW,SAAS,IAAI,OAAJ,CAAY,IAArB,EAA2B,EAA3B,CAAjB;AACA,gBAAY,YAAZ;AACA,gBAAY,aAAZ,CAA0B,MAAM,MAAN,CAAa,MAAvC,EAA+C,QAA/C;AACD;AACF,CAPD;;AAUA;;;;AAIA,IAAM;AAAA,sEAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,cADc,GACT,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,GAA7B,EAAkC,EAAlC,CADS;;AAGpB;;AACA,wBAAY,WAAZ;AACA,oCAAa,eAAS,MAAtB;AACA,gBAAI,MAAM,MAAV,EAAkB;AAChB,0BAAY,iBAAZ,CAA8B,EAA9B;AACD;;AAED;AACA,kBAAM,MAAN,GAAe,IAAI,gBAAJ,CAAW,EAAX,CAAf;;AAXoB;AAAA;AAAA,mBAeZ,MAAM,MAAN,CAAa,SAAb,EAfY;;AAAA;AAgBlB,kBAAM,MAAN,CAAa,gBAAb;;AAGA;AACA,kBAAM,MAAN,CAAa,QAAb;AACA,kBAAM,MAAN,CAAa,YAAb;;AAEA;AACA;AACA,wBAAY,YAAZ,CAAyB,MAAM,MAA/B;AAzBkB;AAAA;;AAAA;AAAA;AAAA;;AA4BlB,kBAAM,wCAAN;;AA5BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgCA,CAAC,YAAD,EAAe,MAAf,EAAuB,OAAvB,CAA+B;AAAA,SAAS,OAAO,gBAAP,CAAwB,KAAxB,EAA+B,aAA/B,CAAT;AAAA,CAA/B;;AAEA;AACA,IAAM,MAAM,SAAN,GAAM,GAAM,CAEjB,CAFD","file":"bundle.js","sourcesContent":["import Search from './models/Search';\r\nimport Recipe from './models/Recipe';\r\nimport * as searchViews from './views/searchView';\r\nimport * as recipeViews from './views/recipeViews';\r\nimport {elements, renderLoader, clearLoader} from './views/base';\r\n\r\n// ***GLOBAL STATE***\r\n// - Search object\r\n// - Current recipie object\r\n// - Shopping list object\r\n// - Linked recipies\r\n\r\nconst state = {};\r\n\r\n/**\r\n* Search controler\r\n*/\r\nconst controlSearch = async () => {\r\n  // 1. Get query from view\r\n  const query = searchViews.getInput(); //todo\r\n\r\n  if (query) {\r\n    // 2. Create new search object and add it to state\r\n    state.search = new Search(query);\r\n\r\n    // 3. Prepare UI for results - loading spinner\r\n    searchViews.clearInput(); //izpraznemo search field\r\n    searchViews.clearResults(); //izbrišemo vsebino ul-ja\r\n    renderLoader(elements.searchResults); //naložimo lader svg\r\n\r\n    try { // 4. Search for recipies\r\n      await state.search.getResults(); //potegnemo recepte\r\n      console.log('Downolading recipes...');\r\n\r\n      // 5. Render results on UI\r\n      clearLoader(); // odmaknemo loader\r\n      searchViews.renderResults(state.search.result); //dodamo recepte v html\r\n    }\r\n    catch (e) {\r\n      alert('Something went wrong with the search...');\r\n      clearLoader();\r\n    }\r\n  }\r\n\r\n};\r\n\r\nelements.searchForm.addEventListener('submit', e => { //event listner na search formi\r\n  e.preventDefault(); //preprečimo, da se stran ponovno naloži\r\n  controlSearch();\r\n});\r\n\r\nelements.searchResultPages.addEventListener('click', e => {\r\n  const btn = e.target.closest('.btn-inline');\r\n  if (btn) {\r\n    const goToPage = parseInt(btn.dataset.goto, 10);\r\n    searchViews.clearResults();\r\n    searchViews.renderResults(state.search.result, goToPage);\r\n  }\r\n});\r\n\r\n\r\n/**\r\n* Recipe controler\r\n*/\r\n\r\nconst controlRecipe = async () => {\r\n  const id = window.location.hash.replace('#', '');\r\n\r\n  //1. Prepere UI for changes\r\n  recipeViews.clearRecipe();\r\n  renderLoader(elements.recipe);\r\n  if (state.search) {\r\n    recipeViews.highlightSelected(id);\r\n  }\r\n\r\n  //2. Create new recipe object and add it to the state\r\n  state.recipe = new Recipe(id);\r\n\r\n  try {\r\n    //3. Get recpie data and parse ingredients\r\n    await state.recipe.getRecipe();\r\n    state.recipe.parseIngredients();\r\n\r\n\r\n    //4. Calculate servings and time\r\n    state.recipe.calcTime();\r\n    state.recipe.calcServings();\r\n\r\n    //5. Render recipe\r\n    clearLoader();\r\n    recipeViews.renderRecipe(state.recipe);\r\n  }\r\n  catch (e) {\r\n    alert('Error processing recipe' + e);\r\n  }\r\n};\r\n\r\n['hashchange', 'load'].forEach(event => window.addEventListener(event, controlRecipe));\r\n\r\n//Handling recipe button click\r\nconst npm = () => {\r\n\r\n};"]}